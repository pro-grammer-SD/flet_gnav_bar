{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#fletgnavbar","title":"FletGNavBar \ud83c\udf1f","text":"<p>Custom Google Navigation Bar (GNav) control for Flet apps, built on Flutter's <code>google_nav_bar</code> package.</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully compatible with Flet.</li> <li>Supports tabs with icons, labels, and optional badges.</li> <li>Customizable colors, active/inactive states, ripple, and hover effects.</li> <li>Works on desktop, web, and mobile targets.</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#git-dependency","title":"Git dependency","text":"<p>Add to your <code>pyproject.toml</code>:</p> <pre><code>dependencies = [\n  \"flet_gnav_bar @ git+https://github.com/pro-grammer-SD/flet_gnav_bar\",\n  \"flet&gt;=0.28.3\",\n]\n</code></pre>"},{"location":"#pypi-dependency","title":"PyPI dependency","text":"<p>If published on PyPI:</p> <pre><code>dependencies = [\n  \"flet_gnav_bar\",\n  \"flet&gt;=0.28.3\",\n]\n</code></pre> <p>Build your app:</p> <pre><code>flet build macos -v\n</code></pre>"},{"location":"#example-usage","title":"Example Usage","text":"<pre><code>import flet as ft\nfrom flet_gnav_bar import FletGNavBar, FletGNavBarButton\n\ndef main(page: ft.Page):\n    gnav = FletGNavBar(\n        selected_index=0,\n        tabs=[\n            FletGNavBarButton(name=\"Home\", icon_name=\"home\", color=\"#2FB14F\", badge=\"5\"),\n            FletGNavBarButton(name=\"Search\", icon_name=\"search\", color=\"#118DA3\"),\n            FletGNavBarButton(name=\"Profile\", icon_name=\"user\", color=\"#E6E21F\", badge=\"!\")\n        ]\n    )\n\n    gnav.on_change = lambda _: print(\"Selected index:\", gnav.selected_index)\n    page.add(gnav)\n\nft.app(target=main)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Full documentation is available here.</p>"},{"location":"FletGnavBar/","title":"FletGnavBar","text":""},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar","title":"<code>FletGNavBar</code>","text":"<p>               Bases: <code>ConstrainedControl</code></p> <p>A Google Navigation Bar (GNav) container.</p> <p>Parameters:</p> Name Type Description Default <code>tabs</code> <code>Optional[list[FletGNavBarButton]]</code> <p>List of navigation bar buttons.</p> <code>None</code> <code>selected_index</code> <code>Optional[int]</code> <p>Index of the currently selected tab.</p> <code>0</code> <code>gap</code> <code>Optional[float]</code> <p>Default spacing between icon and text.</p> <code>None</code> <code>active_color</code> <code>Optional[str]</code> <p>Default active element color.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Default inactive element color.</p> <code>None</code> <code>ripple_color</code> <code>Optional[str]</code> <p>Ripple effect color.</p> <code>None</code> <code>hover_color</code> <code>Optional[str]</code> <p>Hover effect color.</p> <code>None</code> <code>background_color</code> <code>Optional[str]</code> <p>Bar background color.</p> <code>None</code> <code>tab_background_color</code> <code>Optional[str]</code> <p>Background color of active tab.</p> <code>None</code> <code>tab_border_radius</code> <code>Optional[float]</code> <p>Border radius for tab highlight. Defaults to 100.</p> <code>None</code> <code>icon_size</code> <code>Optional[float]</code> <p>Default icon size.</p> <code>None</code> <code>text_size</code> <code>Optional[float]</code> <p>Default text size.</p> <code>None</code> <code>debug</code> <code>Optional[bool]</code> <p>Enables debug visuals.</p> <code>False</code> <code>haptic</code> <code>Optional[bool]</code> <p>Enables haptic feedback on interaction.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for <code>ConstrainedControl</code>.</p> <code>{}</code> Source code in <code>src\\flet_gnav_bar\\flet_gnav_bar.py</code> <pre><code>class FletGNavBar(ConstrainedControl):\n    \"\"\"\n    A Google Navigation Bar (GNav) container.\n\n    Args:\n        tabs (Optional[list[FletGNavBarButton]], optional): List of navigation bar buttons.\n        selected_index (Optional[int], optional): Index of the currently selected tab.\n        gap (Optional[float], optional): Default spacing between icon and text.\n        active_color (Optional[str], optional): Default active element color.\n        color (Optional[str], optional): Default inactive element color.\n        ripple_color (Optional[str], optional): Ripple effect color.\n        hover_color (Optional[str], optional): Hover effect color.\n        background_color (Optional[str], optional): Bar background color.\n        tab_background_color (Optional[str], optional): Background color of active tab.\n        tab_border_radius (Optional[float], optional): Border radius for tab highlight. Defaults to 100.\n        icon_size (Optional[float], optional): Default icon size.\n        text_size (Optional[float], optional): Default text size.\n        debug (Optional[bool], optional): Enables debug visuals.\n        haptic (Optional[bool], optional): Enables haptic feedback on interaction.\n        **kwargs: Additional keyword arguments for `ConstrainedControl`.\n    \"\"\"\n\n    def __init__(\n        self,\n        tabs: Optional[list[FletGNavBarButton]] = None,\n        selected_index: Optional[int] = 0,\n        gap: Optional[float] = None,\n        active_color: Optional[str] = None,\n        color: Optional[str] = None,\n        ripple_color: Optional[str] = None,\n        hover_color: Optional[str] = None,\n        background_color: Optional[str] = None,\n        tab_background_color: Optional[str] = None,\n        tab_border_radius: Optional[float] = None,\n        icon_size: Optional[float] = None,\n        text_size: Optional[float] = None,\n        debug: Optional[bool] = False,\n        haptic: Optional[bool] = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self._tabs: list[FletGNavBarButton] = tabs or []\n        self._update_tabs_attr()\n\n        self.selected_index = selected_index\n        self.gap = gap\n        self.active_color = active_color\n        self.color = color\n        self.ripple_color = ripple_color\n        self.hover_color = hover_color\n        self.background_color = background_color\n        self.tab_background_color = tab_background_color\n        self.tab_border_radius = tab_border_radius\n        self.icon_size = icon_size\n        self.text_size = text_size\n        self.debug = debug\n        self.haptic = haptic\n\n    def _update_tabs_attr(self):\n        \"\"\"Updates internal attribute with serialized tab button data.\"\"\"\n        self._set_attr(\n            \"tabsData\",\n            json.dumps([json.loads(btn._get_attr(\"buttonData\")) for btn in self._tabs]),\n        )\n\n    @property\n    def tabs(self) -&gt; list[FletGNavBarButton]:\n        \"\"\"List of navigation bar buttons (`FletGNavBarButton`).\"\"\"\n        return self._tabs\n\n    @tabs.setter\n    def tabs(self, value: list[FletGNavBarButton]):\n        self._tabs = value or []\n        self._update_tabs_attr()\n\n    def _get_control_name(self):\n        \"\"\"Returns the control identifier for Flet runtime integration.\"\"\"\n        return \"flet_gnav_bar\"\n\n    @property\n    def selected_index(self):\n        \"\"\"Currently selected tab index.\"\"\"\n        return self._get_attr(\"selectedIndex\", data_type=\"int\")\n\n    @selected_index.setter\n    def selected_index(self, value: Optional[int]):\n        self._set_attr(\"selectedIndex\", value)\n\n    @property\n    def gap(self):\n        \"\"\"Default gap between icons and text inside buttons.\"\"\"\n        return self._get_attr(\"gap\", data_type=\"float\")\n\n    @gap.setter\n    def gap(self, value: Optional[float]):\n        self._set_attr(\"gap\", value)\n\n    @property\n    def active_color(self):\n        \"\"\"Active color for icons/text when selected.\"\"\"\n        return self._get_attr(\"activeColor\")\n\n    @active_color.setter\n    def active_color(self, value: Optional[str]):\n        self._set_attr(\"activeColor\", value)\n\n    @property\n    def on_change(self):\n        \"\"\"Event triggered when the selected tab changes.\"\"\"\n        return self._get_event_handler(\"change\")\n\n    @on_change.setter\n    def on_change(self, handler):\n        self._add_event_handler(\"change\", handler)\n\n    @property\n    def color(self):\n        \"\"\"Default inactive color for icons/text.\"\"\"\n        return self._get_attr(\"color\")\n\n    @color.setter\n    def color(self, value: Optional[str]):\n        self._set_attr(\"color\", value)\n\n    @property\n    def ripple_color(self):\n        \"\"\"Ripple effect color when tapping a tab.\"\"\"\n        return self._get_attr(\"rippleColor\")\n\n    @ripple_color.setter\n    def ripple_color(self, value: Optional[str]):\n        self._set_attr(\"rippleColor\", value)\n\n    @property\n    def hover_color(self):\n        \"\"\"Hover effect color.\"\"\"\n        return self._get_attr(\"hoverColor\")\n\n    @hover_color.setter\n    def hover_color(self, value: Optional[str]):\n        self._set_attr(\"hoverColor\", value)\n\n    @property\n    def background_color(self):\n        \"\"\"Background color of the navigation bar.\"\"\"\n        return self._get_attr(\"backgroundColor\")\n\n    @background_color.setter\n    def background_color(self, value: Optional[str]):\n        self._set_attr(\"backgroundColor\", value)\n\n    @property\n    def tab_background_color(self):\n        \"\"\"Background color of the selected tab.\"\"\"\n        return self._get_attr(\"tabBackgroundColor\")\n\n    @tab_background_color.setter\n    def tab_background_color(self, value: Optional[str]):\n        self._set_attr(\"tabBackgroundColor\", value)\n\n    @property\n    def tab_border_radius(self):\n        \"\"\"Corner radius for the selected tab highlight.\"\"\"\n        return self._get_attr(\"tabBorderRadius\", data_type=\"float\")\n\n    @tab_border_radius.setter\n    def tab_border_radius(self, value: Optional[float]):\n        self._set_attr(\"tabBorderRadius\", value)\n\n    @property\n    def icon_size(self):\n        \"\"\"Default icon size for all tabs.\"\"\"\n        return self._get_attr(\"iconSize\", data_type=\"float\")\n\n    @icon_size.setter\n    def icon_size(self, value: Optional[float]):\n        self._set_attr(\"iconSize\", value)\n\n    @property\n    def text_size(self):\n        \"\"\"Default text size for tab labels.\"\"\"\n        return self._get_attr(\"textSize\", data_type=\"float\")\n\n    @text_size.setter\n    def text_size(self, value: Optional[float]):\n        self._set_attr(\"textSize\", value)\n\n    @property\n    def debug(self):\n        \"\"\"Enable or disable debug visuals.\"\"\"\n        return self._get_attr(\"debug\", data_type=\"bool\")\n\n    @debug.setter\n    def debug(self, value: Optional[bool]):\n        self._set_attr(\"debug\", value)\n\n    @property\n    def haptic(self):\n        \"\"\"Enable or disable haptic feedback for tab interactions.\"\"\"\n        return self._get_attr(\"haptic\", data_type=\"bool\")\n\n    @haptic.setter\n    def haptic(self, value: Optional[bool]):\n        self._set_attr(\"haptic\", value)\n</code></pre>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.active_color","title":"<code>active_color</code>  <code>property</code> <code>writable</code>","text":"<p>Active color for icons/text when selected.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.background_color","title":"<code>background_color</code>  <code>property</code> <code>writable</code>","text":"<p>Background color of the navigation bar.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.color","title":"<code>color</code>  <code>property</code> <code>writable</code>","text":"<p>Default inactive color for icons/text.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.debug","title":"<code>debug</code>  <code>property</code> <code>writable</code>","text":"<p>Enable or disable debug visuals.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.gap","title":"<code>gap</code>  <code>property</code> <code>writable</code>","text":"<p>Default gap between icons and text inside buttons.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.haptic","title":"<code>haptic</code>  <code>property</code> <code>writable</code>","text":"<p>Enable or disable haptic feedback for tab interactions.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.hover_color","title":"<code>hover_color</code>  <code>property</code> <code>writable</code>","text":"<p>Hover effect color.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.icon_size","title":"<code>icon_size</code>  <code>property</code> <code>writable</code>","text":"<p>Default icon size for all tabs.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.on_change","title":"<code>on_change</code>  <code>property</code> <code>writable</code>","text":"<p>Event triggered when the selected tab changes.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.ripple_color","title":"<code>ripple_color</code>  <code>property</code> <code>writable</code>","text":"<p>Ripple effect color when tapping a tab.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.selected_index","title":"<code>selected_index</code>  <code>property</code> <code>writable</code>","text":"<p>Currently selected tab index.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.tab_background_color","title":"<code>tab_background_color</code>  <code>property</code> <code>writable</code>","text":"<p>Background color of the selected tab.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.tab_border_radius","title":"<code>tab_border_radius</code>  <code>property</code> <code>writable</code>","text":"<p>Corner radius for the selected tab highlight.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.tabs","title":"<code>tabs</code>  <code>property</code> <code>writable</code>","text":"<p>List of navigation bar buttons (<code>FletGNavBarButton</code>).</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBar.text_size","title":"<code>text_size</code>  <code>property</code> <code>writable</code>","text":"<p>Default text size for tab labels.</p>"},{"location":"FletGnavBar/#src.flet_gnav_bar.flet_gnav_bar.FletGNavBarButton","title":"<code>FletGNavBarButton</code>","text":"<p>               Bases: <code>Control</code></p> <p>Represents a button inside a Google Navigation Bar (GNav).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The text label of the button.</p> required <code>icon_name</code> <code>str</code> <p>The name of the icon to display.</p> required <code>color</code> <code>Optional[str]</code> <p>General color applied to multiple parts if no specific colors are set.</p> <code>None</code> <code>active</code> <code>Optional[bool]</code> <p>Whether the button is active. Defaults to False.</p> <code>False</code> <code>haptic</code> <code>Optional[bool]</code> <p>Whether to enable haptic feedback. Defaults to True.</p> <code>True</code> <code>background_color</code> <code>Optional[str]</code> <p>Background color of the button.</p> <code>None</code> <code>icon_color</code> <code>Optional[str]</code> <p>Color of the icon when inactive.</p> <code>None</code> <code>ripple_color</code> <code>Optional[str]</code> <p>Color of the ripple effect.</p> <code>None</code> <code>hover_color</code> <code>Optional[str]</code> <p>Color when hovered.</p> <code>None</code> <code>icon_active_color</code> <code>Optional[str]</code> <p>Color of the icon when active.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Color of the button text. Defaults to white.</p> <code>'#FFFFFF'</code> <code>debug</code> <code>Optional[bool]</code> <p>Enable debug visuals.</p> <code>False</code> <code>gap</code> <code>Optional[float]</code> <p>Space between icon and text. Defaults to 8.</p> <code>8</code> <code>icon_size</code> <code>Optional[float]</code> <p>Size of the icon. Defaults to 24.</p> <code>24</code> <code>text_size</code> <code>Optional[float]</code> <p>Font size of the text. Defaults to 14.</p> <code>14</code> <code>semantic_label</code> <code>Optional[str]</code> <p>Semantic label for accessibility tools.</p> <code>None</code> <code>opacity</code> <code>OptionalNumber</code> <p>Opacity of the button. Defaults to 1.</p> <code>1</code> <code>tooltip</code> <code>Optional[str]</code> <p>Tooltip text on hover.</p> <code>None</code> <code>visible</code> <code>Optional[bool]</code> <p>Whether the button is visible. Defaults to True.</p> <code>True</code> Source code in <code>src\\flet_gnav_bar\\flet_gnav_bar.py</code> <pre><code>class FletGNavBarButton(Control):\n    \"\"\"\n    Represents a button inside a Google Navigation Bar (GNav).\n\n    Args:\n        name (str): The text label of the button.\n        icon_name (str): The name of the icon to display.\n        color (Optional[str], optional): General color applied to multiple parts if no specific colors are set.\n        active (Optional[bool], optional): Whether the button is active. Defaults to False.\n        haptic (Optional[bool], optional): Whether to enable haptic feedback. Defaults to True.\n        background_color (Optional[str], optional): Background color of the button.\n        icon_color (Optional[str], optional): Color of the icon when inactive.\n        ripple_color (Optional[str], optional): Color of the ripple effect.\n        hover_color (Optional[str], optional): Color when hovered.\n        icon_active_color (Optional[str], optional): Color of the icon when active.\n        text_color (Optional[str], optional): Color of the button text. Defaults to white.\n        debug (Optional[bool], optional): Enable debug visuals.\n        gap (Optional[float], optional): Space between icon and text. Defaults to 8.\n        icon_size (Optional[float], optional): Size of the icon. Defaults to 24.\n        text_size (Optional[float], optional): Font size of the text. Defaults to 14.\n        semantic_label (Optional[str], optional): Semantic label for accessibility tools.\n        opacity (OptionalNumber, optional): Opacity of the button. Defaults to 1.\n        tooltip (Optional[str], optional): Tooltip text on hover.\n        visible (Optional[bool], optional): Whether the button is visible. Defaults to True.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        icon_name: str,\n        color: Optional[str] = None,\n        active: Optional[bool] = False,\n        haptic: Optional[bool] = True,\n        background_color: Optional[str] = None,\n        icon_color: Optional[str] = None,\n        ripple_color: Optional[str] = None,\n        hover_color: Optional[str] = None,\n        icon_active_color: Optional[str] = None,\n        text_color: Optional[str] = \"#FFFFFF\",\n        debug: Optional[bool] = False,\n        gap: Optional[float] = 8,\n        icon_size: Optional[float] = 24,\n        text_size: Optional[float] = 14,\n        semantic_label: Optional[str] = None,\n        opacity: OptionalNumber = 1,\n        tooltip: Optional[str] = None,\n        visible: Optional[bool] = True,\n    ):\n        super().__init__(opacity=opacity, tooltip=tooltip, visible=visible)\n        self._set_attr(\n            \"buttonData\",\n            json.dumps(\n                {\n                    \"text\": name,\n                    \"icon\": icon_name,\n                    \"active\": active,\n                    \"haptic\": haptic,\n                    \"backgroundColor\": background_color or color,\n                    \"iconColor\": icon_color or color,\n                    \"rippleColor\": ripple_color,\n                    \"hoverColor\": hover_color,\n                    \"iconActiveColor\": icon_active_color,\n                    \"textColor\": text_color or color,\n                    \"debug\": debug,\n                    \"gap\": gap,\n                    \"iconSize\": icon_size,\n                    \"textSize\": text_size,\n                    \"semanticLabel\": semantic_label,\n                    \"disabled\": False,\n                }\n            ),\n        )\n\n    def _get_control_name(self):\n        \"\"\"Returns the control identifier for Flet runtime integration.\"\"\"\n        return \"flet_gnav_bar_button\"\n</code></pre>"}]}